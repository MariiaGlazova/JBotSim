description = "Sub project regrouping each 'unitary' jar."


String localRepositoryName = "LocalRepo"
String sonatypeRepositoryName = "Sonatype"
String nexusDockerRepositoryName = "NexusDocker"
String remoteRepositoryName = nexusDockerRepositoryName

subprojects {

    apply plugin: "java-library"
    apply plugin: "idea"
    apply plugin: "maven-publish"
    apply plugin: 'signing'


    publishing {

        repositories {
            maven {
                name = nexusDockerRepositoryName

                def releasesRepoUrl = "http://localhost:8081/nexus/content/repositories/releases/"
                def snapshotsRepoUrl = "http://localhost:8081/nexus/content/repositories/snapshots/"

                def repoUrl = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                url = repoUrl

                credentials {
                    username "admin"
                    password "admin123"
                }
            }
        }

        repositories {
            maven {
                name = sonatypeRepositoryName

                def stagingRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"

                def repoUrl = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : stagingRepoUrl
                url = repoUrl

                credentials {
                    username sonatypeJBotSimUsername
                    password sonatypeJBotSimPassword
                }
            }
        }

        repositories {
            maven {
                name = localRepositoryName
                url = "file://${rootDir}/repo"
            }
        }
    }

    signing {
        // No need to configure signing if in snapshot
        required { !version.endsWith('SNAPSHOT') }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

}

task publishToTestRepository {
    group = 'publishing'
    description = 'Publishes all Maven publications to the test (project root) Maven repository.'

    String bestEffortTaskName = "PublicationTo" + localRepositoryName
    dependsOn tasks.withType(PublishToMavenRepository).matching {it.name.contains(bestEffortTaskName)}
    dependsOn subprojects.collect {it.tasks
            .withType(PublishToMavenRepository)
            .matching {it.name.contains(bestEffortTaskName)} }
}

task publishToRemoteRepository {
    group = 'publishing'
    description = "Publishes all Maven publications to the configured remote Maven repository (currently: $remoteRepositoryName)."

    String bestEffortTaskName = "PublicationTo" + remoteRepositoryName
    dependsOn tasks.withType(PublishToMavenRepository).matching {it.name.contains(bestEffortTaskName)}
    dependsOn subprojects.collect {it.tasks
            .withType(PublishToMavenRepository)
            .matching {it.name.contains(bestEffortTaskName)} }
}

task publishToSonatypeRepository {
    group = 'publishing'
    description = 'Publishes all Maven publications to the Sonatype Maven repository.'

    String bestEffortTaskName = "PublicationTo" + sonatypeRepositoryName
    dependsOn tasks.withType(PublishToMavenRepository).matching {it.name.contains(bestEffortTaskName)}
    dependsOn subprojects.collect {it.tasks
            .withType(PublishToMavenRepository)
            .matching {it.name.contains(bestEffortTaskName)} }
}

task jars {
    group = 'build'
    description = 'Assembles a jar archive for all sub projects.'

    dependsOn tasks.withType(Jar)
    dependsOn subprojects.collect {it.tasks
            .withType(Jar)}
}
task cleans {
    group = 'build'
    description = 'Deletes the build directory for all sub projects.'

    dependsOn clean
    dependsOn subprojects.collect {it.tasks.matching {it.name.equals("clean")}}
}
task tests {
    group = 'verification'
    description = 'Runs the unit tests for all sub projects.'

    dependsOn test
    dependsOn subprojects.collect {it.tasks.withType(Test)}
}
tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}
/**
 * This methods helps modifying the pom for each submodule.
 * The common part is defined here. Only the parameters are to be provided by the submodule.
 * @param nameStr the display name of the submodule
 * @param descriptionStr the description of the submodule
 * @return
 */
Action<? super MavenPom> createConfigureActionForPom (String nameStr, String descriptionStr) {
    return new Action() {
        void execute(Object pom) {
            pom.licenses {
                license {
                    name = 'GNU LESSER GENERAL PUBLIC LICENSE, Version 3.0'
                    url = 'https://www.gnu.org/licenses/lgpl-3.0.txt'
                }
            }

            pom.developers {
                developer {
                    id = 'acasteigts'
                    name = 'Arnaud Casteigts'
                    email = 'acasteigts@labri.fr'
                }
                developer {
                    id = 'rlaplace'
                    name = 'Remi Laplace'
                    email = 'remi.laplace@labri.fr'
                }
            }
            pom.scm {
                connection = 'scm:git:git://github.com/acasteigts/jbotsim.git'
                developerConnection = 'scm:git:ssh://github.com/acasteigts/jbotsim.git'
                url = 'https://github.com/acasteigts/jbotsim/tree/master'
            }

            pom.name = nameStr
            pom.description = descriptionStr
            pom.url = 'https://jbotsim.io/'
        }
    }
}
