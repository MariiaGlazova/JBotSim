
apply plugin: "application"
applicationName = "examples"
mainClassName = "examples.basic.helloworld.Main"

description = "Collection of examples using JBotSim."

dependencies {
//    implementation "io.jbotsim:jbotsim-extras-common:$version"
//    implementation "io.jbotsim:jbotsim-ui-swing:$version"
//    implementation "io.jbotsim:jbotsim-icons:$version"

    implementation project(':lib:jbotsim-extras-swing'),
            project(':lib:jbotsim-ui-swing'),
            project(':lib:jbotsim-icons')
}

//Create a run task for each example in the examples directory:

task createAllExamplesScripts(group: "Application", description: "Create the examples binaries as scripts.") doLast {
}

def scripts = [:]
def srcDirectoryPath = "${projectDir}" + File.separator + "src" + File.separator + "main" + File.separator +
        "java" + File.separator + "examples" + File.separator
println(srcDirectoryPath)
fileTree(srcDirectoryPath).visit{
    details ->
        if(details.file.isFile()){
            if(details.file.text.contains("public static void main(")){
                def name = details.file.getName().substring(0, details.file.getName().lastIndexOf('.'))
                def relativePath = details.file.getPath()
                relativePath = relativePath.replace(srcDirectoryPath, '').replace(File.separator, '.').replace('.java', '')
                scripts.put(name, "examples." + relativePath)
            }
        }
}


scripts.each() { scriptName, className ->
    def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts) {
        mainClassName = className
        applicationName = scriptName
        classpath = startScripts.classpath
        outputDir = startScripts.outputDir
    }
    createAllExamplesScripts.dependsOn(t)
    def r = tasks.create(name: 'run' + scriptName.substring(0, 1).toUpperCase() + scriptName.substring(1),
            type: JavaExec, group: "Application", description: "Run " + scriptName + " example.") {
        classpath sourceSets.main.runtimeClasspath
        main = className
    }
    r.dependsOn(t)
    applicationDistribution.into("bin") {
        duplicatesStrategy= DuplicatesStrategy.EXCLUDE
        from(t)
        fileMode = 0755
    }
}


